#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 2 -*-

# Regexp handling function changed name after 1.2.6
if("1.2.6" not in check_mk_version):
  get_regex = regex

# Example input:
#
# <<<aix_lpar_cpu:sep(59)>>>
# 5.00;0.07;1.50;0.2

# Default parameters values - support for wATO check paramaters
factory_settings["aix_lpar_cpu_defaults"] = {
  "pct_usage_levels" : (100.0,100.0),
  "num_usage_levels" : (128.0,128.0),
  "avg_min"          : 15,
}

# Inventory function: no items, just returns if it gets invoked
def inventory_aix_lpar_cpu(info):
  for line in info:
    return [ ( None,{} ) ]

# Check function
def check_aix_lpar_cpu(item, params, info):
  # Parsing dei parametri
  (pct_usage_warn, pct_usage_crit) = params["pct_usage_levels"]
  (num_usage_warn, num_usage_crit) = params["num_usage_levels"]
  avg_min = params["avg_min"]

  now = time.time()

  for line in info:
    (pct_usage,num_usage,max_cores,entc) = map( lambda x: savefloat(x), line )

  # Get the average over "avg_min" minutes
  pct_usage_avg = get_average("aix_lpar_cpu.pct_usage", now, pct_usage, avg_min, initialize_zero = False)
  num_usage_avg = get_average("aix_lpar_cpu.num_usage", now, num_usage, avg_min, initialize_zero = False)

  # PCT rc
  if pct_usage >= pct_usage_crit:
    pct_usage_rc = 2
  elif pct_usage >= pct_usage_warn:
    pct_usage_rc = 1
  else:
    pct_usage_rc = 0

  # NUM rc
  if num_usage >= num_usage_crit:
    num_usage_rc = 2
  elif num_usage >= num_usage_warn:
    num_usage_rc = 1
  else:
    num_usage_rc = 0

  # Final RC: worst case among all of the metrics RCs - for now, ignore the avg
  rc = max([num_usage_rc, pct_usage_rc])

  # Populate the full perfdata array, including the moving average of metrics
  perfdata = [
    ("pct_usage",     pct_usage,     pct_usage_warn, pct_usage_crit, 0, 100),
    ("pct_usage_avg", pct_usage_avg, None, None, 0, 100),
    ("num_usage",     num_usage,     num_usage_warn, num_usage_crit, 0, max_cores),
    ("num_usage_avg", num_usage_avg, None, None, 0, max_cores),
    ("entc",          entc,          None, None, None, None)
  ]

  output = "%.2f%% usage (%.2f over %.2f physical cores)" % (pct_usage,num_usage,max_cores)

  return(rc, output, perfdata)

# Register the check with all its attributes
check_info['aix_lpar_cpu'] = {
    "check_function"          : check_aix_lpar_cpu,
    "inventory_function"      : inventory_aix_lpar_cpu,
    "service_description"     : "Aix LPAR CPU",
    "has_perfdata"            : True,
    "group"                   : "lpar_cpu",
    "default_levels_variable" : "aix_lpar_cpu_defaults",
}

